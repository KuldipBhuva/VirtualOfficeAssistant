//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMSDomain.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class EmployeeEntities : DbContext
    {
        public EmployeeEntities()
            : base("name=EmployeeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Advance_Payroll_Master> Advance_Payroll_Master { get; set; }
        public DbSet<AppointmentsMaster> AppointmentsMasters { get; set; }
        public DbSet<Blood_Group_Master> Blood_Group_Master { get; set; }
        public DbSet<Branch_master> Branch_master { get; set; }
        public DbSet<Category_Master> Category_Master { get; set; }
        public DbSet<Company_master> Company_master { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<CredentialMaster> CredentialMasters { get; set; }
        public DbSet<document_category> document_category { get; set; }
        public DbSet<EmpDrivingLicence> EmpDrivingLicences { get; set; }
        public DbSet<employee_document> employee_document { get; set; }
        public DbSet<employee_master> employee_master { get; set; }
        public DbSet<EmployeeAbsconding> EmployeeAbscondings { get; set; }
        public DbSet<EmployeeAllowance> EmployeeAllowances { get; set; }
        public DbSet<EmployeeContact> EmployeeContacts { get; set; }
        public DbSet<EmployeeDeposite> EmployeeDeposites { get; set; }
        public DbSet<EmployeeDocument> EmployeeDocuments { get; set; }
        public DbSet<EmployeeExperience> EmployeeExperiences { get; set; }
        public DbSet<EmployeeHealthCard> EmployeeHealthCards { get; set; }
        public DbSet<EmployeeIncrement> EmployeeIncrements { get; set; }
        public DbSet<EmployeeInsurance> EmployeeInsurances { get; set; }
        public DbSet<EmployeeLeave> EmployeeLeaves { get; set; }
        public DbSet<EmployeeOtherDetail> EmployeeOtherDetails { get; set; }
        public DbSet<EmployeeQualification> EmployeeQualifications { get; set; }
        public DbSet<EmployeeRelative> EmployeeRelatives { get; set; }
        public DbSet<EmployeeVisa> EmployeeVisas { get; set; }
        public DbSet<FormMaster> FormMasters { get; set; }
        public DbSet<FormMenuTran> FormMenuTrans { get; set; }
        public DbSet<Item_Master> Item_Master { get; set; }
        public DbSet<Master> Masters { get; set; }
        public DbSet<Masters_Tran> Masters_Tran { get; set; }
        public DbSet<MenuHeaderMaster> MenuHeaderMasters { get; set; }
        public DbSet<MenuTran> MenuTrans { get; set; }
        public DbSet<Other_Expenses> Other_Expenses { get; set; }
        public DbSet<PayrollMaster> PayrollMasters { get; set; }
        public DbSet<Petrol_Card> Petrol_Card { get; set; }
        public DbSet<Petrol_Expense> Petrol_Expense { get; set; }
        public DbSet<Repayment_Master> Repayment_Master { get; set; }
        public DbSet<SponsorMaster> SponsorMasters { get; set; }
        public DbSet<TenancyDocument> TenancyDocuments { get; set; }
        public DbSet<TenancyMaster> TenancyMasters { get; set; }
        public DbSet<Trade_License> Trade_License { get; set; }
        public DbSet<TradeDocument> TradeDocuments { get; set; }
        public DbSet<TravelExpence> TravelExpences { get; set; }
        public DbSet<UserFormTran> UserFormTrans { get; set; }
        public DbSet<UserModulesTran> UserModulesTrans { get; set; }
        public DbSet<Vehicle_History> Vehicle_History { get; set; }
        public DbSet<VehicleDocument> VehicleDocuments { get; set; }
        public DbSet<VehicleMaster> VehicleMasters { get; set; }
        public DbSet<VehicleRepairing> VehicleRepairings { get; set; }
        public DbSet<WorkHistory> WorkHistories { get; set; }
        public DbSet<IssueDetail> IssueDetails { get; set; }
        public DbSet<ReturnDetail> ReturnDetails { get; set; }
        public DbSet<Stock_Master> Stock_Master { get; set; }
        public DbSet<ChallanMaster> ChallanMasters { get; set; }
        public DbSet<ChallanTran> ChallanTrans { get; set; }
        public DbSet<ConsignmentMaster> ConsignmentMasters { get; set; }
        public DbSet<PartyMaster> PartyMasters { get; set; }
        public DbSet<ChequeReturnMaster> ChequeReturnMasters { get; set; }
        public DbSet<EmployeePassport> EmployeePassports { get; set; }
        public DbSet<Login_Master> Login_Master { get; set; }
    
        public virtual ObjectResult<GetEmployeeData_Result> GetEmployeeData(Nullable<int> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeData_Result>("GetEmployeeData", cidParameter);
        }
    
        public virtual ObjectResult<GetEmpPayment_Result> GetEmpPayment(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpPayment_Result>("GetEmpPayment", empIdParameter);
        }
    
        public virtual ObjectResult<GetLedger_Result> GetLedger(Nullable<int> compId, Nullable<int> empId)
        {
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLedger_Result>("GetLedger", compIdParameter, empIdParameter);
        }
    
        public virtual ObjectResult<PayrollReport_Result> PayrollReport(Nullable<int> month, Nullable<int> compId, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayrollReport_Result>("PayrollReport", monthParameter, compIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<PayrollReport_New_Result> PayrollReport_New(Nullable<int> month, Nullable<int> compId, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayrollReport_New_Result>("PayrollReport_New", monthParameter, compIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<PayrollReport_Testing_Result> PayrollReport_Testing(string month, string compId)
        {
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var compIdParameter = compId != null ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayrollReport_Testing_Result>("PayrollReport_Testing", monthParameter, compIdParameter);
        }
    
        public virtual int Usp_AddRepayment(Nullable<int> month, Nullable<int> year, Nullable<int> compId, Nullable<int> empId, Nullable<decimal> payment, Nullable<int> installment)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("CompId", compId) :
                new ObjectParameter("CompId", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var paymentParameter = payment.HasValue ?
                new ObjectParameter("Payment", payment) :
                new ObjectParameter("Payment", typeof(decimal));
    
            var installmentParameter = installment.HasValue ?
                new ObjectParameter("Installment", installment) :
                new ObjectParameter("Installment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_AddRepayment", monthParameter, yearParameter, compIdParameter, empIdParameter, paymentParameter, installmentParameter);
        }
    
        public virtual ObjectResult<Sp_Databind_Result> Sp_Databind(string action)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Databind_Result>("Sp_Databind", actionParameter);
        }
    
        public virtual ObjectResult<sp_HealthcardExpirydateReports_Result> sp_HealthcardExpirydateReports(Nullable<int> days, Nullable<int> comp_id)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var comp_idParameter = comp_id.HasValue ?
                new ObjectParameter("Comp_id", comp_id) :
                new ObjectParameter("Comp_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_HealthcardExpirydateReports_Result>("sp_HealthcardExpirydateReports", daysParameter, comp_idParameter);
        }
    }
}
